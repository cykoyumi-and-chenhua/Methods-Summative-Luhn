/*
    * Date: November 4, 2020
    * Name: Dami Peng, Chenhua Yang
    * Description: Program Calculates the Diver points based on the score and difficulty of the dive. This repeats 3 times, and the total score for the event is totalled.
    *
    *
*/

import java.util.Scanner;
// More packages may be imported in the space below
import java.io.*;

class CustomerSystem {
    public static void main(String[] args) throws IOException {
        

        // Please do not edit any of these variables
        Scanner reader = new Scanner(System.in);
        String userInput, enterCustomerOption, generateCustomerOption, exitCondition;
        enterCustomerOption = "1";
        generateCustomerOption = "2";
        exitCondition = "9";

        // More variables for the main may be declared in the space below
        int id = 0;
        String fileName, firstName, lastName, postal, creditNo, location, fileID;
        fileID = "CustomerID.txt";
        fileName ="";
        firstName ="";
        lastName ="";
        postal ="";
        creditNo ="";
        location ="";
        userInput ="";
        String infoArray[] = {firstName, lastName, postal, creditNo};
        File customer = new File("CustomerID.txt");

        // If created ID File Exists, read ID File
        if (customer.exists()) {
            id = ReadID(customer);
        }

        do{
            printMenu();                                    // Printing out the main menu
            userInput = reader.nextLine();                  // User selection from the menu

            if (userInput.equals(enterCustomerOption)){
                // Only the line below may be editted based on the parameter list and how you design the method return

                // Every time a customer enters their information, the ID changes
                id++;
                System.out.println("Your Customer ID is: "+id);
                enterCustomerInfo(fileName);

                
            }
            else if (userInput.equals(generateCustomerOption)) {
                // Only the line below may be editted based on the parameter list and how you design the method return
                
                // Enter File information
                System.out.print("Please enter your file location : ");
                location = reader.nextLine();

                System.out.print("Please enter your file name : ");
                fileName = reader.nextLine();
                
                generateCustomerDataFile(id,location, fileName,infoArray);
                
            }
            // Please enter a valid number
            else{
                System.out.println("Please type in a valid option (A number from 1-9)");
            }
            
            // Every time it loops, the ID file is updated
            WriteID(id);
        } while (!userInput.equals(exitCondition));         // Exits once the user types 

        System.out.println("Program Terminated");
        reader.close();
    }
    public static void printMenu(){
        System.out.println("Customer and Sales System\n"
        .concat("1. Enter Customer Information\n")
        .concat("2. Generate Customer data file\n")
        .concat("3. Report on total Sales (Not done in this part)\n")
        .concat("4. Check for fraud in sales data (Not done in this part)\n")
        .concat("9. Quit\n")
        .concat("Enter menu option (1-9)\n")
        );
    }
    /*
    * This method may be edited to achieve the task however you like.
    * The method may not nesessarily be a void return type
    */
    public static void enterCustomerInfo(String a) {
        System.out.println("");
    }
    /*
    * This method may be edited to achieve the task however you like.
    * The method may not nesessarily be a void return type
    */
    public static void validatePostalCode(){
    }
    /*
    * Name: Dami Peng
    *
    * Discription: Method validates Credit Card number using Luhn Algorithm
    * 
    * @param: int num *Credit Card Number*
    * @return/output: The Credit Card information is valid / The Credit Card Information is not valid
    */
    public static boolean validateCreditCard(String creditNo){
        // Sums 
        int sum1 =0, sum2 =0;
        // Length of Credit Card Number
        int digits = creditNo.length();

        // There must be aleast 9 digits in the Credit Card
        if (digits < 9) {
            return false;
        }
        // Used to reverse the Credit Card Number
        String reverseNum ="";
        
        // Reverse String 
        for (int i = digits - 1; i >=0; i--) {
            reverseNum +=(creditNo.charAt(i));
        }

        // Even Numbers 
        for (int i =1; i < digits; i +=2) {
            char even = reverseNum.charAt(i);
            // Changes String into integer
            int evenNums = Integer.parseInt(String.valueOf(even));
            evenNums*=2;

            // Sum of double digits

            // First Digit (ex. 10 -> 1)
            int evenDigit1 = evenNums/10;
            // Second Digit (ex. 10 -> 0)
            int evenDigit2= evenNums%10;

            // Sum (ex. 1 + 0 -> 1)
            evenNums = evenDigit1 + evenDigit2;
            sum2 += evenNums;
            
        }
        
        // Odd Numbers
        for (int i = 0; i < digits; i+=2) {
            char odd = reverseNum.charAt(i);

            int oddNums;
            try {
                // Changes String into integer
                oddNums = Integer.parseInt(String.valueOf(odd));
            }
            // Catches if Credit Card No. is/contains a string
            catch (NumberFormatException e ) {
                return false;
            }

            // Adds all odd Numbers
            sum1 +=oddNums;
            
        }
        int totalsum = sum1+sum2;
        
        // Validation statement
        if (totalsum%10 == 0) {
            return true;
        } 
        else {
            return false;
        }
    }

    /*
    * Name: Dami Peng
    *
    * Discription: Method prints Customer Information into a csv file at specified directory.
    * 
    * @param: String location, String fileName, String infoArray[]
    * TWO of these params require user input: String location, String fileName. *
    * @return/output: chicken.csv 
    *
    * First Name|Last Name|Postal Code|Credit Card No.|
    * Dami|Peng|T0A|5500000000000004|
    */
    public static void generateCustomerDataFile(int id,String location, String fileName, String infoArray[]) throws IOException{
        String headerArr[] = {"First Name", "Last Name", "Postal Code", "Credit Card No."};

        String fileExtension = ".csv";
        
        File newFile = new File(fileName);
        //Writes file / Merges Files if there is already one created
        PrintWriter printWriter = new PrintWriter(new FileWriter((location+"/"+fileName+fileExtension),true));
        

        // Entire Section for writing in the file
        printWriter.println();

        printWriter.println("Customer ID: "+id);

        for (int i = 0; i < headerArr.length; i++ ) {
            printWriter.print(headerArr[i]+"|"); 
        }
        printWriter.println();
        for (int i = 0; i < infoArray.length; i++ ) {
            printWriter.print(infoArray[i]+"|"); 
        }
        
        printWriter.close();
    }
    /*******************************************************************
    *       ADDITIONAL METHODS MAY BE ADDED BELOW IF NECESSARY         *
    *******************************************************************/

    /*
    * Name: Dami Peng
    *
    * Discription: Method writes unique ID text file
    * 
    * @param: int id
    *
    *
    */
    public static void WriteID(int id) throws IOException{
        String fileName = "CustomerID.txt";
            // Writes "CustomerID.txt"
            File file = new File(fileName);
            
            // Prints ID
            PrintWriter printWriter = new PrintWriter(fileName);
            printWriter.println(id);

            printWriter.close();
        }

    /*
    * Name: Dami Peng
    *
    * Discription: Method reads unique ID text file 
    * 
    * @param: String fileID
    *
    *
    */
    public static int ReadID(File fileID) throws IOException{
        // Scans file
        Scanner scanner = new Scanner(fileID);

        // Outputs saved ID
        int lastID = scanner.nextInt();
        scanner.close();
        return lastID;
    }        
}
